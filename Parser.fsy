%{
open LambdaPlayground.LambdaCalculus
open LambdaPlayground.PiCalculus
open LambdaPlayground.ParserSupport
%}

%start lambda_line
%start pi_line
%start let_line
%token < string > ID
%token < string > OP
%token < string > NUM
%token < string > ASSIGN
%token LAMBDA DOT LPAREN RPAREN NEWLINE LET EOF LANGLE RANGLE PAR SEMICOLON COMMAND_SYM MID ERROR NEW
%type < LambdaPlayground.LambdaCalculus.LambdaTerm<string> > lambda_line
%type < LambdaPlayground.PiCalculus.PiTerm<string> > pi_line
%type < string * LambdaPlayground.LambdaCalculus.LambdaTerm<string> > let_line
// NEW is ID and ZERO is NUM
// (\x.x x)((\x.x x)(\x.x))
// (NEW n).(n(m).m<n>.0 | (NEW m).n<m>.m(n).0)

%%

lambda_line : lambda_term EOF       { $1 }
pi_line : pi_term EOF               { $1 }
let_line : let_binding EOF          { $1 }

op :
    OP                      { $1 }
    | PAR                   { "|" }
    | COMMAND_SYM           { "%" }
    | ASSIGN                { $1 }
    | LANGLE                { "<" }
    | RANGLE                { ">" }
    | DOT                   { "." }

item :
    let_binding             { }
    | lambda_term           { runLambda $1 }
    | COMMAND_SYM ID        { runCommand $2 }
    
let_binding :
    LET ID ASSIGN lambda_term
    { $2, $4 }
    | LET NUM ASSIGN lambda_term
    { $2, $4 }
    | LET MID op ASSIGN lambda_term
    { $"({$3})", $5 }

lambda_term :
    LAMBDA id_list DOT lambda_term
    { buildLambda $2 $4 }
    | body_lambda_term
    { $1 }
    
 body_lambda_term :
    non_infix_lambda_term op body_lambda_term
    { LTApply (LTApply (LTVar $"({$2})", $1), $3) }
    | non_infix_lambda_term
    { $1 }
    
id_list :
    ID id_list              { $1 :: $2 }
    | ID                    { [$1] }
    
non_infix_lambda_term :
    non_infix_lambda_term non_app_lambda_term
    { LTApply ($1, $2) }
    | non_app_lambda_term
    { $1 }
    
non_app_lambda_term :
    | LPAREN lambda_term RPAREN
    { $2 }
    | LPAREN op RPAREN
    { LTVar $"({$2})" }
    | ID
    { LTVar $1 }
    | NUM
    { LTVar $1 }

pi_term :
    non_par_pi_term PAR pi_term
    { PTPar ($1, $3) }
    | non_par_pi_term
    { $1 }

non_par_pi_term :
    LPAREN NEW ID RPAREN DOT non_par_pi_term
    { PTNew ($3, $6) }
    | ID LPAREN ID RPAREN DOT non_par_pi_term
    { PTRead ($1, $3, $6) }
    | ID LANGLE ID RANGLE DOT non_par_pi_term
    { PTSend ($1, $3, $6) }
    | NUM
    { if $1 <> "0" then err "Not a valid term." else PTZero }
    | LPAREN non_par_pi_term RPAREN
    { $2 }
