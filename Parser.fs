// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open LambdaPlayground.LambdaCalculus
open LambdaPlayground.PiCalculus
open LambdaPlayground.ParserSupport

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LAMBDA
  | DOT
  | LPAREN
  | RPAREN
  | NEWLINE
  | LET
  | EOF
  | LANGLE
  | RANGLE
  | PAR
  | SEMICOLON
  | COMMAND_SYM
  | MID
  | ERROR
  | NEW
  | ASSIGN of ( string )
  | NUM of ( string )
  | OP of ( string )
  | ID of ( string )
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LAMBDA
    | TOKEN_DOT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_NEWLINE
    | TOKEN_LET
    | TOKEN_EOF
    | TOKEN_LANGLE
    | TOKEN_RANGLE
    | TOKEN_PAR
    | TOKEN_SEMICOLON
    | TOKEN_COMMAND_SYM
    | TOKEN_MID
    | TOKEN_ERROR
    | TOKEN_NEW
    | TOKEN_ASSIGN
    | TOKEN_NUM
    | TOKEN_OP
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startlet_line
    | NONTERM__startpi_line
    | NONTERM__startlambda_line
    | NONTERM_lambda_line
    | NONTERM_pi_line
    | NONTERM_let_line
    | NONTERM_op
    | NONTERM_item
    | NONTERM_let_binding
    | NONTERM_lambda_term
    | NONTERM_body_lambda_term
    | NONTERM_id_list
    | NONTERM_non_infix_lambda_term
    | NONTERM_non_app_lambda_term
    | NONTERM_pi_term
    | NONTERM_non_par_pi_term

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LAMBDA  -> 0 
  | DOT  -> 1 
  | LPAREN  -> 2 
  | RPAREN  -> 3 
  | NEWLINE  -> 4 
  | LET  -> 5 
  | EOF  -> 6 
  | LANGLE  -> 7 
  | RANGLE  -> 8 
  | PAR  -> 9 
  | SEMICOLON  -> 10 
  | COMMAND_SYM  -> 11 
  | MID  -> 12 
  | ERROR  -> 13 
  | NEW  -> 14 
  | ASSIGN _ -> 15 
  | NUM _ -> 16 
  | OP _ -> 17 
  | ID _ -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LAMBDA 
  | 1 -> TOKEN_DOT 
  | 2 -> TOKEN_LPAREN 
  | 3 -> TOKEN_RPAREN 
  | 4 -> TOKEN_NEWLINE 
  | 5 -> TOKEN_LET 
  | 6 -> TOKEN_EOF 
  | 7 -> TOKEN_LANGLE 
  | 8 -> TOKEN_RANGLE 
  | 9 -> TOKEN_PAR 
  | 10 -> TOKEN_SEMICOLON 
  | 11 -> TOKEN_COMMAND_SYM 
  | 12 -> TOKEN_MID 
  | 13 -> TOKEN_ERROR 
  | 14 -> TOKEN_NEW 
  | 15 -> TOKEN_ASSIGN 
  | 16 -> TOKEN_NUM 
  | 17 -> TOKEN_OP 
  | 18 -> TOKEN_ID 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startlet_line 
    | 1 -> NONTERM__startpi_line 
    | 2 -> NONTERM__startlambda_line 
    | 3 -> NONTERM_lambda_line 
    | 4 -> NONTERM_pi_line 
    | 5 -> NONTERM_let_line 
    | 6 -> NONTERM_op 
    | 7 -> NONTERM_op 
    | 8 -> NONTERM_op 
    | 9 -> NONTERM_op 
    | 10 -> NONTERM_op 
    | 11 -> NONTERM_op 
    | 12 -> NONTERM_item 
    | 13 -> NONTERM_item 
    | 14 -> NONTERM_item 
    | 15 -> NONTERM_let_binding 
    | 16 -> NONTERM_let_binding 
    | 17 -> NONTERM_let_binding 
    | 18 -> NONTERM_lambda_term 
    | 19 -> NONTERM_lambda_term 
    | 20 -> NONTERM_body_lambda_term 
    | 21 -> NONTERM_body_lambda_term 
    | 22 -> NONTERM_id_list 
    | 23 -> NONTERM_id_list 
    | 24 -> NONTERM_non_infix_lambda_term 
    | 25 -> NONTERM_non_infix_lambda_term 
    | 26 -> NONTERM_non_app_lambda_term 
    | 27 -> NONTERM_non_app_lambda_term 
    | 28 -> NONTERM_non_app_lambda_term 
    | 29 -> NONTERM_non_app_lambda_term 
    | 30 -> NONTERM_pi_term 
    | 31 -> NONTERM_pi_term 
    | 32 -> NONTERM_non_par_pi_term 
    | 33 -> NONTERM_non_par_pi_term 
    | 34 -> NONTERM_non_par_pi_term 
    | 35 -> NONTERM_non_par_pi_term 
    | 36 -> NONTERM_non_par_pi_term 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LAMBDA  -> "LAMBDA" 
  | DOT  -> "DOT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | NEWLINE  -> "NEWLINE" 
  | LET  -> "LET" 
  | EOF  -> "EOF" 
  | LANGLE  -> "LANGLE" 
  | RANGLE  -> "RANGLE" 
  | PAR  -> "PAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMAND_SYM  -> "COMMAND_SYM" 
  | MID  -> "MID" 
  | ERROR  -> "ERROR" 
  | NEW  -> "NEW" 
  | ASSIGN _ -> "ASSIGN" 
  | NUM _ -> "NUM" 
  | OP _ -> "OP" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LAMBDA  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LANGLE  -> (null : System.Object) 
  | RANGLE  -> (null : System.Object) 
  | PAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMAND_SYM  -> (null : System.Object) 
  | MID  -> (null : System.Object) 
  | ERROR  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | ASSIGN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 2us; 65535us; 34us; 35us; 41us; 44us; 0us; 65535us; 1us; 65535us; 0us; 10us; 6us; 65535us; 4us; 6us; 20us; 21us; 23us; 24us; 27us; 28us; 31us; 32us; 41us; 42us; 7us; 65535us; 4us; 33us; 20us; 33us; 23us; 33us; 27us; 33us; 31us; 33us; 35us; 36us; 41us; 33us; 2us; 65535us; 29us; 30us; 37us; 38us; 7us; 65535us; 4us; 34us; 20us; 34us; 23us; 34us; 27us; 34us; 31us; 34us; 35us; 34us; 41us; 34us; 8us; 65535us; 4us; 40us; 20us; 40us; 23us; 40us; 27us; 40us; 31us; 40us; 34us; 39us; 35us; 40us; 41us; 40us; 2us; 65535us; 2us; 8us; 49us; 50us; 6us; 65535us; 2us; 48us; 49us; 48us; 51us; 69us; 55us; 56us; 61us; 62us; 66us; 67us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 7us; 9us; 12us; 13us; 15us; 22us; 30us; 33us; 41us; 50us; 53us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 3us; 15us; 16us; 17us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 3us; 20us; 21us; 24us; 1us; 20us; 1us; 20us; 2us; 22us; 23us; 1us; 22us; 1us; 24us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 30us; 31us; 1us; 30us; 1us; 30us; 2us; 32us; 36us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 34us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 36us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 74us; 76us; 78us; 81us; 83us; 85us; 87us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 105us; 107us; 109us; 112us; 114us; 116us; 118us; 120us; 122us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; |]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|1us; 32768us; 5us; 18us; 0us; 49152us; 3us; 32768us; 2us; 51us; 16us; 68us; 18us; 57us; 0us; 49152us; 4us; 32768us; 0us; 29us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 49152us; 1us; 32768us; 6us; 7us; 0us; 16387us; 1us; 32768us; 6us; 9us; 0us; 16388us; 1us; 32768us; 6us; 11us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 3us; 32768us; 12us; 25us; 16us; 22us; 18us; 19us; 1us; 32768us; 15us; 20us; 4us; 32768us; 0us; 29us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 16399us; 1us; 32768us; 15us; 23us; 4us; 32768us; 0us; 29us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 16400us; 1us; 32768us; 17us; 26us; 1us; 32768us; 15us; 27us; 4us; 32768us; 0us; 29us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 16401us; 1us; 32768us; 18us; 37us; 1us; 32768us; 1us; 31us; 4us; 32768us; 0us; 29us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 16402us; 0us; 16403us; 9us; 16405us; 2us; 41us; 7us; 16us; 8us; 17us; 9us; 13us; 11us; 14us; 15us; 15us; 16us; 47us; 17us; 12us; 18us; 46us; 3us; 32768us; 2us; 41us; 16us; 47us; 18us; 46us; 0us; 16404us; 1us; 16407us; 18us; 37us; 0us; 16406us; 0us; 16408us; 0us; 16409us; 10us; 32768us; 0us; 29us; 2us; 41us; 7us; 16us; 8us; 17us; 9us; 13us; 11us; 14us; 15us; 15us; 16us; 47us; 17us; 12us; 18us; 46us; 1us; 32768us; 3us; 43us; 0us; 16410us; 1us; 32768us; 3us; 45us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 1us; 16415us; 9us; 49us; 3us; 32768us; 2us; 51us; 16us; 68us; 18us; 57us; 0us; 16414us; 4us; 32768us; 2us; 51us; 14us; 52us; 16us; 68us; 18us; 57us; 1us; 32768us; 18us; 53us; 1us; 32768us; 3us; 54us; 1us; 32768us; 1us; 55us; 3us; 32768us; 2us; 51us; 16us; 68us; 18us; 57us; 0us; 16416us; 2us; 32768us; 2us; 58us; 7us; 63us; 1us; 32768us; 18us; 59us; 1us; 32768us; 3us; 60us; 1us; 32768us; 1us; 61us; 3us; 32768us; 2us; 51us; 16us; 68us; 18us; 57us; 0us; 16417us; 1us; 32768us; 18us; 64us; 1us; 32768us; 8us; 65us; 1us; 32768us; 1us; 66us; 3us; 32768us; 2us; 51us; 16us; 68us; 18us; 57us; 0us; 16418us; 0us; 16419us; 1us; 32768us; 3us; 70us; 0us; 16420us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 7us; 8us; 13us; 14us; 16us; 17us; 19us; 20us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 33us; 35us; 40us; 41us; 43us; 48us; 49us; 51us; 53us; 58us; 59us; 61us; 63us; 68us; 69us; 70us; 80us; 84us; 85us; 87us; 88us; 89us; 90us; 101us; 103us; 104us; 106us; 107us; 108us; 109us; 111us; 115us; 116us; 121us; 123us; 125us; 127us; 131us; 132us; 135us; 137us; 139us; 141us; 145us; 146us; 148us; 150us; 152us; 156us; 157us; 158us; 160us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 4us; 4us; 5us; 4us; 1us; 3us; 1us; 2us; 1us; 2us; 1us; 3us; 3us; 1us; 1us; 3us; 1us; 6us; 6us; 6us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16402us; 16403us; 65535us; 65535us; 16404us; 65535us; 16406us; 16408us; 16409us; 65535us; 65535us; 16410us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 16418us; 16419us; 65535us; 16420us; |]
let _fsyacc_reductions ()  =    [| 
# 226 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string * LambdaPlayground.LambdaCalculus.LambdaTerm<string>  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startlet_line));
# 235 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  LambdaPlayground.PiCalculus.PiTerm<string>  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startpi_line));
# 244 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  LambdaPlayground.LambdaCalculus.LambdaTerm<string>  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startlambda_line));
# 253 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                                                           _1 
                   )
# 24 "Parser.fsy"
                 :  LambdaPlayground.LambdaCalculus.LambdaTerm<string> ));
# 264 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                                           _1 
                   )
# 25 "Parser.fsy"
                 :  LambdaPlayground.PiCalculus.PiTerm<string> ));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_let_binding in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                           _1 
                   )
# 26 "Parser.fsy"
                 :  string * LambdaPlayground.LambdaCalculus.LambdaTerm<string> ));
# 286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                   _1 
                   )
# 29 "Parser.fsy"
                 : 'gentype_op));
# 297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                   "|" 
                   )
# 30 "Parser.fsy"
                 : 'gentype_op));
# 307 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                   "%" 
                   )
# 31 "Parser.fsy"
                 : 'gentype_op));
# 317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                   _1 
                   )
# 32 "Parser.fsy"
                 : 'gentype_op));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                   "<" 
                   )
# 33 "Parser.fsy"
                 : 'gentype_op));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                   ">" 
                   )
# 34 "Parser.fsy"
                 : 'gentype_op));
# 348 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_let_binding in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                   
                   )
# 37 "Parser.fsy"
                 : 'gentype_item));
# 359 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                   runLambda _1 
                   )
# 38 "Parser.fsy"
                 : 'gentype_item));
# 370 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                   runCommand _2 
                   )
# 39 "Parser.fsy"
                 : 'gentype_item));
# 381 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  string  in
            let _3 = parseState.GetInput(3) :?>  string  in
            let _4 = parseState.GetInput(4) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                           _2, _4 
                   )
# 43 "Parser.fsy"
                 : 'gentype_let_binding));
# 394 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  string  in
            let _3 = parseState.GetInput(3) :?>  string  in
            let _4 = parseState.GetInput(4) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                           _2, _4 
                   )
# 45 "Parser.fsy"
                 : 'gentype_let_binding));
# 407 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?>  string  in
            let _4 = parseState.GetInput(4) :?>  string  in
            let _5 = parseState.GetInput(5) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                           $"({_3})", _5 
                   )
# 47 "Parser.fsy"
                 : 'gentype_let_binding));
# 420 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_id_list in
            let _4 = parseState.GetInput(4) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                           buildLambda _2 _4 
                   )
# 51 "Parser.fsy"
                 : 'gentype_lambda_term));
# 432 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                           _1 
                   )
# 53 "Parser.fsy"
                 : 'gentype_lambda_term));
# 443 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_infix_lambda_term in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                           LTApply (LTApply (LTVar $"({_2})", _1), _3) 
                   )
# 57 "Parser.fsy"
                 : 'gentype_body_lambda_term));
# 456 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_infix_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                           _1 
                   )
# 59 "Parser.fsy"
                 : 'gentype_body_lambda_term));
# 467 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _2 = parseState.GetInput(2) :?> 'gentype_id_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 62 "Parser.fsy"
                 : 'gentype_id_list));
# 479 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                   [_1] 
                   )
# 63 "Parser.fsy"
                 : 'gentype_id_list));
# 490 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_infix_lambda_term in
            let _2 = parseState.GetInput(2) :?> 'gentype_non_app_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                           LTApply (_1, _2) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_non_infix_lambda_term));
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_app_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                           _1 
                   )
# 69 "Parser.fsy"
                 : 'gentype_non_infix_lambda_term));
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_lambda_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                           _2 
                   )
# 73 "Parser.fsy"
                 : 'gentype_non_app_lambda_term));
# 524 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                           LTVar $"({_2})" 
                   )
# 75 "Parser.fsy"
                 : 'gentype_non_app_lambda_term));
# 535 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                           LTVar _1 
                   )
# 77 "Parser.fsy"
                 : 'gentype_non_app_lambda_term));
# 546 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                           LTVar _1 
                   )
# 79 "Parser.fsy"
                 : 'gentype_non_app_lambda_term));
# 557 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_par_pi_term in
            let _3 = parseState.GetInput(3) :?> 'gentype_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                           PTPar (_1, _3) 
                   )
# 83 "Parser.fsy"
                 : 'gentype_pi_term));
# 569 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_par_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                           _1 
                   )
# 85 "Parser.fsy"
                 : 'gentype_pi_term));
# 580 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?>  string  in
            let _6 = parseState.GetInput(6) :?> 'gentype_non_par_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                           PTNew (_3, _6) 
                   )
# 89 "Parser.fsy"
                 : 'gentype_non_par_pi_term));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _3 = parseState.GetInput(3) :?>  string  in
            let _6 = parseState.GetInput(6) :?> 'gentype_non_par_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                           PTRead (_1, _3, _6) 
                   )
# 91 "Parser.fsy"
                 : 'gentype_non_par_pi_term));
# 605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _3 = parseState.GetInput(3) :?>  string  in
            let _6 = parseState.GetInput(6) :?> 'gentype_non_par_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                           PTSend (_1, _3, _6) 
                   )
# 93 "Parser.fsy"
                 : 'gentype_non_par_pi_term));
# 618 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                           if _1 <> "0" then err "Not a valid term." else PTZero 
                   )
# 95 "Parser.fsy"
                 : 'gentype_non_par_pi_term));
# 629 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_non_par_pi_term in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                           _2 
                   )
# 97 "Parser.fsy"
                 : 'gentype_non_par_pi_term));
|]
# 641 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let let_line lexer lexbuf :  string * LambdaPlayground.LambdaCalculus.LambdaTerm<string>  =
    engine lexer lexbuf 0 :?> _
let pi_line lexer lexbuf :  LambdaPlayground.PiCalculus.PiTerm<string>  =
    engine lexer lexbuf 2 :?> _
let lambda_line lexer lexbuf :  LambdaPlayground.LambdaCalculus.LambdaTerm<string>  =
    engine lexer lexbuf 4 :?> _
