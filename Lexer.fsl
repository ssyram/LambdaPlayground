{
open FSharp.Text.Lexing
open Parser
}

let alphabet = (['a' - 'z'] | ['A' - 'Z'] | '_' | ''')
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let ops = ( '&' | '|' | '=' | '?' | '/' | '+' | '-' | '*' | '^' | '%' | '.' | '$' )
let consOps = (ops | '~' | '>' | '<')

rule token = parse
| whitespace                            { token lexbuf }
| newline                               {
    let _ = lexbuf.StartPos <- lexbuf.StartPos.NextLine in
    NEWLINE
}
| "\\"                                  { LAMBDA }
| "("                                   { LPAREN }
| ")"                                   { RPAREN }
| "<"                                   { LANGLE }
| ">"                                   { RANGLE }
| "new"                                 { NEW }
| "NEW"                                 { NEW }
| "let"                                 { LET }
| "mid"                                 { MID }
| "."                                   { DOT }
| "|"                                   { PAR }
| "%"                                   { COMMAND_SYM }
| "="                                   { ASSIGN (System.String lexbuf.Lexeme) }
| ":="                                  { ASSIGN (System.String lexbuf.Lexeme) }
| "->"                                  { ASSIGN (System.String lexbuf.Lexeme) }
| "~"                                   { ID "~" }
| ops(consOps)*                         { OP (System.String lexbuf.Lexeme) }
| ['''][^''']+[''']                     { OP (System.String lexbuf.Lexeme) }
| ['"'][^'"']+['"']                     { OP (System.String lexbuf.Lexeme) }
| ['`'][^'`']+['`']                     { OP (System.String lexbuf.Lexeme) }
| alphabet(alphabet|digit)*             { ID (System.String lexbuf.Lexeme) }
| ['-']?digit+                                  { ID (System.String lexbuf.Lexeme) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?     { NUM (System.String lexbuf.Lexeme) }
| _              { ERROR }
| eof            { EOF }