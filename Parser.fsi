// Signature file for parser generated by fsyacc
module Parser
type token = 
  | LAMBDA
  | DOT
  | LPAREN
  | RPAREN
  | NEWLINE
  | LET
  | EOF
  | LANGLE
  | RANGLE
  | PAR
  | SEMICOLON
  | COMMAND_SYM
  | MID
  | ERROR
  | NEW
  | ASSIGN of ( string )
  | NUM of ( string )
  | OP of ( string )
  | ID of ( string )
type tokenId = 
    | TOKEN_LAMBDA
    | TOKEN_DOT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_NEWLINE
    | TOKEN_LET
    | TOKEN_EOF
    | TOKEN_LANGLE
    | TOKEN_RANGLE
    | TOKEN_PAR
    | TOKEN_SEMICOLON
    | TOKEN_COMMAND_SYM
    | TOKEN_MID
    | TOKEN_ERROR
    | TOKEN_NEW
    | TOKEN_ASSIGN
    | TOKEN_NUM
    | TOKEN_OP
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startlet_line
    | NONTERM__startpi_line
    | NONTERM__startlambda_line
    | NONTERM_lambda_line
    | NONTERM_pi_line
    | NONTERM_let_line
    | NONTERM_op
    | NONTERM_item
    | NONTERM_let_binding
    | NONTERM_lambda_term
    | NONTERM_body_lambda_term
    | NONTERM_id_list
    | NONTERM_non_infix_lambda_term
    | NONTERM_non_app_lambda_term
    | NONTERM_pi_term
    | NONTERM_non_par_pi_term
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val let_line : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( string * LambdaPlayground.LambdaCalculus.LambdaTerm<string> ) 
val pi_line : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( LambdaPlayground.PiCalculus.PiTerm<string> ) 
val lambda_line : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( LambdaPlayground.LambdaCalculus.LambdaTerm<string> ) 
